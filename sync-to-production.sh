#!/bin/bash

# Sync Local Database Changes to Production
# This script helps export local database and sync to production

set -e

echo "═══════════════════════════════════════════════════════════"
echo "  🚀 Sync Local Database to Production"
echo "═══════════════════════════════════════════════════════════"
echo ""

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Configuration
LOCAL_API="http://localhost:8080/api"
EXPORT_DIR="./database-exports"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
EXPORT_FILE="$EXPORT_DIR/paintings_export_$TIMESTAMP.sql"

# Create export directory
mkdir -p "$EXPORT_DIR"

echo "📊 Step 1: Fetching all paintings from local database..."
echo ""

# Fetch all paintings from local API
response=$(curl -s "$LOCAL_API/paintings?page=0&size=10000")

if [ -z "$response" ]; then
    echo -e "${RED}❌ Error: Could not connect to local API at $LOCAL_API${NC}"
    echo "   Make sure your backend is running on port 8080"
    exit 1
fi

# Count paintings
count=$(echo "$response" | jq '.content | length')
echo -e "${GREEN}✅ Found $count paintings in local database${NC}"
echo ""

# Generate SQL export
echo "📝 Step 2: Generating SQL export file..."
echo ""

cat > "$EXPORT_FILE" << 'EOF'
-- Database Export Generated by Admin Tool
-- Export Date: $(date)
-- Total Paintings: $count

-- Note: This will update existing paintings by ID
-- Run this on your production database

EOF

# Extract paintings and generate SQL
echo "$response" | jq -r '.content[] | 
"UPDATE paintings SET 
  url_key = '\''\(.urlKey)'\'',
  title = '\''\(.title | gsub("'"'"'"; "'"'"''"'"'"))'\'',
  description = '\''\(.description | gsub("'"'"'"; "'"'"''"'"'"))'\'',
  category = '\''\(.category)'\'',
  tags = '\''\(.tags)'\'',
  image_url = '\''\(.imageUrl)'\'',
  thumbnail_url = '\''\(.thumbnailUrl)'\'',
  difficulty = \(.difficulty),
  color_palette = '\''\(.colorPalette)'\'',
  featured = \(.featured),
  updated_at = NOW()
WHERE id = \(.id);
"' >> "$EXPORT_FILE"

echo -e "${GREEN}✅ SQL export generated: $EXPORT_FILE${NC}"
echo ""

# Show summary
echo "═══════════════════════════════════════════════════════════"
echo "  📋 Export Summary"
echo "═══════════════════════════════════════════════════════════"
echo ""
echo "  Paintings exported: $count"
echo "  Export file: $EXPORT_FILE"
echo "  File size: $(du -h "$EXPORT_FILE" | cut -f1)"
echo ""

echo "═══════════════════════════════════════════════════════════"
echo "  🚀 Next Steps to Sync to Production"
echo "═══════════════════════════════════════════════════════════"
echo ""
echo "Option 1: Manual SQL Execution (Recommended for safety)"
echo "  1. Review the generated SQL file: $EXPORT_FILE"
echo "  2. Connect to your production database"
echo "  3. Execute the SQL file"
echo ""
echo "Option 2: Using deploy script"
echo "  ./deploy-to-hostinger.sh"
echo ""
echo "Option 3: Direct API sync (if you add this feature)"
echo "  - POST the data to production API endpoint"
echo ""

# Ask if user wants to open the file
echo ""
read -p "Would you like to open the export file now? (y/n) " -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    if command -v code &> /dev/null; then
        code "$EXPORT_FILE"
    elif command -v nano &> /dev/null; then
        nano "$EXPORT_FILE"
    else
        cat "$EXPORT_FILE"
    fi
fi

echo ""
echo -e "${GREEN}✅ Export complete!${NC}"

